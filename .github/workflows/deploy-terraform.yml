name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "One of (dev, qa, prod)"
        required: true
        type: string
      version:
        description: "Version to deploy"
        required: true
        type: string
      terraform_version:
        description: "Terraform version string"
        required: false
        type: string
        default: '1.2.0'
    secrets:
      TFE_TOKEN:
        required: true

jobs:
  terraform-plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
    defaults:
      run:
        working-directory: infra/envs/${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Connect to Terraform Cloud
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
          terraform_version: ${{ inputs.terraform_version }}

      - name: Check formatting
        id: fmt
        run: terraform fmt -check

      - name: Initialize Terraform
        id: init
        run: terraform init
        
      - name: Terraform plan -destroy

      - name: Terraform Plan
        shell: bash
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var app_version=${{ inputs.version }}
        continue-on-error: true
        
        

      - name: Terminate if plan failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Plan
        if: github.event_name != 'pull_request'
        run: terraform plan -var app_version=${{ inputs.version }}

  terraform-apply:
    name: Terraform apply
    needs: terraform-plan
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      TF_IN_AUTOMATION: true
    defaults:
      run:
        working-directory: infra/envs/${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Connect to Terraform Cloud
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
          terraform_version: ${{ inputs.terraform_version }}

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var app_version=${{ inputs.version }}
